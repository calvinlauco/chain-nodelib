clean_cache: &clean_cache
  language: rust
  sudo: required
  os: linux
  if: type = cron
  cache:
    directories: # cargo caching from https://docs.travis-ci.com/user/caching/#rust-cargo-cache
    - $HOME/.cargo
    - $HOME/.rustup/toolchains
    - $HOME/lib
    - $HOME/include
    - $HOME/bin
  script:
  - echo "Cleaning cargo cache ..."
  - rm -rf $HOME/.cargo/registry
  - rm -rf $HOME/.rustup/toolchains
  - cargo clean

build_base: &build_base
  addons:
    apt:
      packages:
      - libssl-dev
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libc6-dev
  cache:
  - cargo
  - npm
  env:
  - RUST_BACKTRACE=1
  - RUSTFLAGS="-Ctarget-feature=+aes,+sse2,+sse4.1,+ssse3"
  - PATH=$HOME/.local/bin:$PATH
  - LD_LIBRARY_PATH=$HOME/lib
  - PKG_CONFIG_PATH=$HOME/lib/pkgconfig
  before_install: # versions from https://github.com/erickt/rust-zmq/blob/master/.travis.yml
  - ./ci-scripts/install-zeromq.sh

rust_build_base: &rust_build_base
  <<: *build_base
  language: rust
  os: linux
  install:
  - nvm install 10
  - nvm use 10
  - rustc --version
  - cargo --version
  - npm -v
  - node -v

publish_base: &publish_base
  <<: *build_base
  language: node_js
  if: (type == push) AND (branch == master)
  install:
  - rustc --version
  - cargo --version
  - node -v
  - npm -v
  script:
  - travis_wait 60 npm install
  - npm run binary:publish
publish_job: &publish_job
  <<: *publish_base
  before_install:
  - curl https://sh.rustup.rs -sSf > /tmp/rustup.sh
  - sh /tmp/rustup.sh -y
  - export PATH="$HOME/.cargo/bin:$PATH"
  - source "$HOME/.cargo/env"
publish_job_windows: &publish_job_windows
  <<: *publish_base
  before_install:
  - curl https://sh.rustup.rs -sSf > /tmp/rustup.sh
  - sh /tmp/rustup.sh -y
  - export PATH="$HOME/.cargo/bin:$PATH"

jobs:
  allow_failures:
  - rust: nightly
  include:
  - stage: Build Test and Code Test
    name: Build Test (stable)
    <<: *rust_build_base
    rust: stable
    if: (type != cron) AND (branch != staging.tmp) AND (branch != trying.tmp)
    script:
    - npm install
    - npm run build || travis_terminate 1
  - <<: *rust_build_base
    name: Build Test (nightly)
    rust: nightly
    if: (type != cron) AND (branch != staging.tmp) AND (branch != trying.tmp)
    script:
    - npm install
    - npm run build || travis_terminate 1
  - <<: *rust_build_base
    name: Code Test (stable)
    rust: stable
    if: (type != cron) AND (branch != staging.tmp) AND (branch != trying.tmp)
    script:
    - npm install
    - npm run build:neon || travis_terminate 1
    - npm run test || travis_terminate 1
  - <<: *rust_build_base
    name: Code Test (nightly)
    rust: nightly
    if: (type != cron) AND (branch != staging.tmp) AND (branch != trying.tmp)
    script:
    - npm install
    - npm run build:neon || travis_terminate 1
    - npm run test || travis_terminate 1
  - <<: *rust_build_base
    name: Lint and Audit
    if: (type != cron) AND (branch != staging.tmp) AND (branch != trying.tmp)
    script:
    - npm install
    - |
        rustfmt --version || rustup component add rustfmt
        cargo-clippy --version || rustup component add clippy
        cargo-audit -h || cargo install cargo-audit
    - rustfmt --version
    - cargo-clippy --version
    - cargo-audit -h
    - npm run lint || travis_terminate 1
    #   - npm run audit || travis_terminate 1
  - stage: Build and Publish
    name: Latest node (OSX)
    <<: *publish_job
    os: osx
    node_js: node
  - name: Node.js 10 (OSX)
    <<: *publish_job
    os: osx
    node_js: 10
  - name: Node.js 9 (OSX)
    <<: *publish_job
    os: osx
    node_js: 9
  - name: Node.js 8 (OSX)
    <<: *publish_job
    os: osx
    node_js: 8
  - name: Latest node (Linux)
    <<: *publish_job
    os: linux
    node_js: node
  - name: Node.js 10 (Linux)
    <<: *publish_job
    os: linux
    node_js: 10
  - name: Node.js 9 (Linux)
    <<: *publish_job
    os: linux
    node_js: 9
  - name: Node.js 8 (Linux)
    <<: *publish_job
    os: linux
    node_js: 8
  - name: Latest node (Windows)
    <<: *publish_job_windows
    os: windows
    node_js: node
  - name: Node.js 10 (Windows)
    <<: *publish_job_windows
    os: windows
    node_js: 10
  - name: Node.js 9 (Windows)
    <<: *publish_job_windows
    os: windows
    node_js: 9
  - name: Node.js 8 (Windows)
    <<: *publish_job_windows
    os: windows
    node_js: 8
  - stage: Push Artifact
    <<: *rust_build_base
    script:
    - npm install
    - rm -f native/index.node
    - curl -fL https://getcli.jfrog.io | sh
    - ./jfrog rt config --url "$ARTIFACTORY_URL" --user "$ARTIFACTORY_USER" --password "$ARTIFACTORY_PASSWORD" --interactive=false &&
      ./jfrog rt npmi --build-name=TravisCI --build-number=$TRAVIS_BUILD_NUMBER "$ARTIFACTORY_NAME" &&
      ./jfrog rt npmp --build-name=TravisCI --build-number=$TRAVIS_BUILD_NUMBER "$ARTIFACTORY_NAME"

